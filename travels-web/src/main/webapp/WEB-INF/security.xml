<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
	xmlns:p="http://www.springframework.org/schema/p" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.2.xsd">
			
	<security:http auto-config="false" use-expressions="true" access-denied-page="/denied"
			entry-point-ref="authenticationEntryPoint" >
		
		<security:intercept-url pattern="/login*" access="permitAll" />
		<security:session-management invalid-session-url="/login" />
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/login"
				logout-url="/j_spring_security_logout"/>
				
		<security:custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
		
	</security:http>
			
			
	<!-- Custom filter for username and password. The real customization is done in the customAthenticationManager -->
 	<bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
  		p:authenticationManager-ref="authenticationManager"
  		p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
  		p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler"/>
  		
	<!-- Custom authentication manager. In order to authenticate -->
	<bean id="authenticationManager" class="com.xcodefix.travels.web.security.AuthendicationProvider">
		
	</bean>  		
			
			
</beans>